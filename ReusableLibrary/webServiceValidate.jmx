<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="savingBalanceChecker" elementType="Argument">
              <stringProp name="Argument.name">savingBalanceChecker</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanBalanceChecker" elementType="Argument">
              <stringProp name="Argument.name">loanBalanceChecker</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="accountBalanceChecker" elementType="Argument">
              <stringProp name="Argument.name">accountBalanceChecker</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counterSaving" elementType="Argument">
              <stringProp name="Argument.name">counterSaving</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counterLoan" elementType="Argument">
              <stringProp name="Argument.name">counterLoan</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counterAccount" elementType="Argument">
              <stringProp name="Argument.name">counterAccount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="messageFailure" elementType="Argument">
              <stringProp name="Argument.name">messageFailure</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counterTemp" elementType="Argument">
              <stringProp name="Argument.name">counterTemp</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="initialValidateValue" elementType="Argument">
              <stringProp name="Argument.name">initialValidateValue</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Saving Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">memAcc</stringProp>
          <stringProp name="ForeachController.returnVal">memberAcc</stringProp>
          <boolProp name="ForeachController.useSeparator">false</boolProp>
        </ForeachController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${savingBalanceChecker}&quot;==&quot;true&quot; &amp;&amp; &quot;${__V(memBal${counterSaving})}&quot;!=&quot;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Saving Account Balance ${counterSaving}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/mfinws/mfinServices/deposit/${memberAcc}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">savingBalance</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..balance</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor savingError" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">savingError</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.error</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">String messageFailure;
if(prev.getResponseCode().equals(&quot;404&quot;)){
	Failure=true;
	vars.put(&quot;savingBalanceChecker&quot;,&quot;false&quot;);
	vars.put(&quot;savingCodeRes&quot;,&quot;404&quot;);
	FailureMessage=&quot;Webservice failed for SavingBalance&quot;+vars.get(&quot;counterSaving&quot;);
	messageFailure=vars.get(&quot;messageFailure&quot;);
	if(messageFailure.length()&gt;0){
		messageFailure=messageFailure+&quot;;&quot;+FailureMessage;
	}
	else{
		messageFailure=FailureMessage;
	}
	vars.put(&quot;messageFailure&quot;,messageFailure);
}
else if(vars.get(&quot;savingError&quot;).length()&gt;0){
	if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
		if(vars.get(&quot;memberAcc&quot;).length()&gt;0){
			vars.put(&quot;preSavingBalance&quot;+vars.get(&quot;counterSaving&quot;),&quot;0&quot;);
			int counterSaving=Integer.parseInt(vars.get(&quot;counterSaving&quot;));
			counterSaving++;
			vars.put(&quot;maxPreSavingCount&quot;,vars.get(&quot;counterSaving&quot;));
			vars.put(&quot;counterSaving&quot;,counterSaving.toString());
			
		}
		else{
			vars.put(&quot;savingBalanceChecker&quot;,&quot;false&quot;);
			FailureMessage=&quot;Null value present in memberAcc&quot;+vars.get(&quot;counterSaving&quot;);
		}
	}
	else if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;1&quot;)){
		if(vars.get(&quot;memberAcc&quot;).length()&gt;0){
			vars.put(&quot;postSavingBalance&quot;+vars.get(&quot;counterSaving&quot;),&quot;0&quot;);
			int counterSaving=Integer.parseInt(vars.get(&quot;counterSaving&quot;));
			counterSaving++;
			vars.put(&quot;maxPostSavingCount&quot;,vars.get(&quot;counterSaving&quot;));
			vars.put(&quot;counterSaving&quot;,counterSaving.toString());
		}
		else{
			vars.put(&quot;savingBalanceChecker&quot;,&quot;false&quot;);
			FailureMessage=&quot;Null value present in memberAcc&quot;+vars.get(&quot;counterSaving&quot;);
		}
	}
}
else{
	//log.info(&quot;Mapping Here&quot;);
	if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
		try{
			if(vars.get(&quot;savingBalance&quot;).length()&gt;0){
				vars.put(&quot;preSavingBalance&quot;+vars.get(&quot;counterSaving&quot;),vars.get(&quot;savingBalance&quot;));
				int counterSaving=Integer.parseInt(vars.get(&quot;counterSaving&quot;));
				counterSaving++;
				vars.put(&quot;maxPreSavingCount&quot;,vars.get(&quot;counterSaving&quot;));
				vars.put(&quot;counterSaving&quot;,counterSaving.toString());
			}
			else{
				messageFailure=vars.get(&quot;messageFailure&quot;);
				//vars.put(&quot;savingBalanceChecker&quot;,&quot;false&quot;);
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value returned&quot;+vars.get(&quot;savingError&quot;);
				}
				else{
					messageFailure=&quot;Null value returned&quot;+vars.get(&quot;savingError&quot;);
				}

			}
		}
		catch(Exception ex){
			//vars.put(&quot;savingBalanceChecker&quot;,&quot;false&quot;);
			messageFailure=vars.get(&quot;messageFailure&quot;);
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;Saving Balance no value returned&quot;;
			}
			else{
				messageFailure=&quot;Saving Balance no value returned&quot;;
			}
			vars.put(&quot;messageFailure&quot;,messageFailure);
		}
	}
    else if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;1&quot;)){
		int maxPreCondition=Integer.parseInt(vars.get(&quot;maxPreSavingCount&quot;));
		try{
			if(vars.get(&quot;savingBalance&quot;).length()&gt;0 &amp;&amp; Integer.parseInt(vars.get(&quot;counterSaving&quot;))&lt;=maxPreCondition){
				vars.put(&quot;postSavingBalance&quot;+vars.get(&quot;counterSaving&quot;),vars.get(&quot;savingBalance&quot;));
				int counterSaving=Integer.parseInt(vars.get(&quot;counterSaving&quot;));
				counterSaving++;
				vars.put(&quot;maxPostSavingCount&quot;,vars.get(&quot;counterSaving&quot;));
				vars.put(&quot;counterSaving&quot;,counterSaving.toString());
			}
			else{
				messageFailure=vars.get(&quot;messageFailure&quot;);
				//vars.put(&quot;savingBalanceChecker&quot;,&quot;false&quot;);
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value returned&quot;+vars.get(&quot;savingError&quot;);
				}
				else{
					messageFailure=&quot;Null value returned&quot;+vars.get(&quot;savingError&quot;);
				}

			}
		}
		catch(Exception ex){
			//vars.put(&quot;savingBalanceChecker&quot;,&quot;false&quot;);
			messageFailure=vars.get(&quot;messageFailure&quot;);
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;Saving Balance no value returned&quot;;
			}
			else{
				messageFailure=&quot;Saving Balance no value returned&quot;;
			}
			vars.put(&quot;messageFailure&quot;,messageFailure);
		}	
    }	
}</stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Loan Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">memLoan</stringProp>
          <stringProp name="ForeachController.returnVal"></stringProp>
          <boolProp name="ForeachController.useSeparator">false</boolProp>
        </ForeachController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${loanBalanceChecker}&quot;==&quot;true&quot; &amp;&amp; &quot;${__V(memOut${counterLoan})}&quot;!=&quot;&quot; </stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loan Account Balance ${counterLoan}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/mfinws/mfinServices/loan/${__V(memLoan${counterLoan})}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">loanBalance</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..balance</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor loanError" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">loanError</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.error</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor status" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">loanStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..status</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor receivable principal" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">receivable_principal</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..receivable_pri</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor receivable interest" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">receivable_interest</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..receivable_int</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor receivable penalty" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">receivable_penalty</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..receivable_pen</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor recovery principal" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">recovery_principal</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..recovery_pri</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor recovery interest" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">recovery_interest</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..recovery_int</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor recovery penalty" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">recovery_penalty</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..recovery_pen</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">beanshell</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">//Loan status assign value failure 
public void loanStatusAssign(){
	try{
		if(${__javaScript(vars.get(&quot;memLoanStatus&quot;+vars.get(&quot;counterLoan&quot;))!=null)}){
			if(vars.get(&quot;memLoanStatus&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
				if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
					vars.put(&quot;preLoanStatus&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;loanStatus&quot;));
				}
				else{
					vars.put(&quot;postLoanStatus&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;loanStatus&quot;));
				}
			}
			else{
				if(vars.get(&quot;memLoanStatus&quot;+vars.get(&quot;counterLoan&quot;)).equals(&quot;&quot;)){
					//log.info(&quot;Loan status mapping has been skipped&quot;);
				}
				else{
					//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					String messageFailure=vars.get(&quot;messageFailure&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Null value returned from loan status&quot;;
					}
					else{
						messageFailure=&quot;Null value returned from loan status&quot;;
					}
					vars.put(&quot;messageFailure&quot;,messageFailure);
					log.info(&quot;Null value returned from webservice for loan status&quot;);
				}
			}
		}
		else{
			//log.info(&quot;Loan status mapping has been skipped&quot;);
		}
	}
	catch(Exception ex){
		//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		log.info(&quot;Loan status failure message&quot;);
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Loan status assigning failure message&quot;;
		}
		else{
			messageFailure=&quot;Loan status assigning failure message&quot;;
		}
		vars.put(&quot;messageFailure&quot;,messageFailure);
	}
}


//Receivable assign values here
public void loanReceivablePrincipalAssign(){
	try{
		if(${__javaScript(vars.get(&quot;memReceivablePri&quot;+vars.get(&quot;counterLoan&quot;))!=null)}){
			if(vars.get(&quot;memReceivablePri&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
				if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
					vars.put(&quot;preReceivablePri&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;receivable_principal&quot;));
				}
				else{
					vars.put(&quot;postReceivablePri&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;receivable_principal&quot;));
				}
			}
			else{
				if(vars.get(&quot;memReceivablePri&quot;+vars.get(&quot;counterLoan&quot;)).equals(&quot;&quot;)){
					//log.info(&quot;Receivable principal mapping has been skipped&quot;);
				}
				else{
					//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					String messageFailure=vars.get(&quot;messageFailure&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Null value returned from loan receivable principal&quot;;
					}
					else{
						messageFailure=&quot;Null value returned from loan receivable principal&quot;;
					}
					vars.put(&quot;messageFailure&quot;,messageFailure);
					log.info(&quot;Null value returned from webservice for loan receivable principal&quot;);	
				}
				
			}
		}
		else{
			//log.info(&quot;Receivable principal mapping has been skipped&quot;);
		}
	}
	catch(Exception ex){
		//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		log.info(&quot;Receivable assigning failure message&quot;);
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Receivable prinicpal assigning failure message&quot;;
		}
		else{
			messageFailure=&quot;Receivable principal assigning failure message&quot;;
		}
		vars.put(&quot;messageFailure&quot;,messageFailure);
	}
}

public void loanReceivableInterestAssign(){
	try{
		if(${__javaScript(vars.get(&quot;memReceivableInt&quot;+vars.get(&quot;counterLoan&quot;))!=null)}){
			if(vars.get(&quot;memReceivableInt&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
				if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
					vars.put(&quot;preReceivableInt&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;receivable_interest&quot;));
				}
				else{
					vars.put(&quot;postReceivableInt&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;receivable_interest&quot;));
				}
			}
			else{
				if(vars.get(&quot;memReceivableInt&quot;+vars.get(&quot;counterLoan&quot;)).equals(&quot;&quot;)){
					//log.info(&quot;Receivable interest mapping has been skipped&quot;);
				}
				else{
					//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					String messageFailure=vars.get(&quot;messageFailure&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Null value returned from webservice for loan receivable interest&quot;;
					}
					else{
						messageFailure=&quot;Null value returned from webservice for loan receivable interest&quot;;
					}
					log.info(&quot;Null value returned from webservice for loan receivable interest&quot;);	
				}
				
			}
		}
		else{
			//log.info(&quot;Receivable interest mapping has been skipped&quot;);
		}
	}
	catch(Exception ex){
		//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Receivable interest assigning failure message&quot;;
		}
		else{
			messageFailure=&quot;Receivable interest assigning failure message&quot;;
		}
		log.info(&quot;Receivable interest assigning failure message&quot;);
	}
}

public void loanReceivablePenaltyAssign(){
	try{
		if(${__javaScript(vars.get(&quot;memReceivablePen&quot;+vars.get(&quot;counterLoan&quot;))!=null)}){
			if(vars.get(&quot;memReceivablePen&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
				if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
					vars.put(&quot;preReceivablePen&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;receivable_penalty&quot;));
				}
				else{
					vars.put(&quot;postReceivablePen&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;receivable_penalty&quot;));
				}
			}
			else{
				if(vars.get(&quot;memReceivablePen&quot;+vars.get(&quot;counterLoan&quot;)).equals(&quot;&quot;)){
					//log.info(&quot;Receivable penalty mapping has been skipped&quot;);
				}
				else{
					//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					String messageFailure=vars.get(&quot;messageFailure&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Null value returned from webservice for loan receivable penalty&quot;;
					}
					else{
						messageFailure=&quot;Null value returned from webservice for loan receivable penalty&quot;;
					}
					log.info(&quot;Null value returned from webservice for loan receivable penalty&quot;);
				}
			}
		}
		else{
			//log.info(&quot;Receivable penalty mapping has been skipped&quot;);
		}
	}
	catch(Exception ex){
		//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Receivable penalty assigning failure message&quot;;
		}
		else{
			messageFailure=&quot;Receivable penalty assigning failure message&quot;;
		}
		log.info(&quot;Receivable penalty assigning failure message&quot;);
	}
}

//Recovery contents here

public void recoveryPrincipalValueAssign(){
	try{
		if(${__javaScript(vars.get(&quot;memRecoveryPri&quot;+vars.get(&quot;counterLoan&quot;))!=null)}){
			if(vars.get(&quot;memRecoveryPri&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
				if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
					vars.put(&quot;preRecoveryPri&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;recovery_principal&quot;));
				}
				else{
					vars.put(&quot;postRecoveryPri&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;recovery_principal&quot;));
				}
			}
			else{
				if(vars.get(&quot;memRecoveryPri&quot;+vars.get(&quot;counterLoan&quot;)).equals(&quot;&quot;)){
					//log.info(&quot;Recovery principal mapping has been skipped&quot;);
				}
				else{
					//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					String messageFailure=vars.get(&quot;messageFailure&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Null value returned from webservice for loan recovery principal&quot;;
					}
					else{
						messageFailure=&quot;Null value returned from webservice for loan recovery principal&quot;;
					}
					log.info(&quot;Null value returned from webservice for loan recovery principal&quot;);	
				}
				
			}
		}
		else{
			//log.info(&quot;Recovery principal mapping has been skipped&quot;);
		}
	}
	catch(Exception ex){
		//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Recovery principal assigning failure message&quot;;
		}
		else{
			messageFailure=&quot;Recovery principal assigning failure message&quot;;
		}
		log.info(&quot;Recovery principal assigning failure message&quot;);
	}
}

public void recoveryInterestValueAssign(){
	try{
		if(${__javaScript(vars.get(&quot;memRecoveryInt&quot;+vars.get(&quot;counterLoan&quot;))!=null)}){
			if(vars.get(&quot;memRecoveryInt&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
				if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
					vars.put(&quot;preRecoveryInt&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;recovery_interest&quot;));
				}
				else{
					vars.put(&quot;postRecoveryInt&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;recovery_interest&quot;));
				}
			}
			else{
				if(vars.get(&quot;memRecoveryInt&quot;+vars.get(&quot;counterLoan&quot;)).equals(&quot;&quot;)){
					//log.info(&quot;Recovery interest mapping has been skipped&quot;);
				}
				else{
					//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					String messageFailure=vars.get(&quot;messageFailure&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Null value returned from webservice for loan recovery interest&quot;;
					}
					else{
						messageFailure=&quot;Null value returned from webservice for loan recovery interest&quot;;
					}
					log.info(&quot;Null value returned from webservice for loan recovery interest&quot;);
				}
			}
		}
		else{
			//log.info(&quot;Recovery interest mapping has been skipped&quot;);
		}
	}
	catch(Exception ex){
		//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Recovery interest assigning failure message&quot;;
		}
		else{
			messageFailure=&quot;Recovery interest assigning failure message&quot;;
		}
		log.info(&quot;Recovery interest assigning failure message&quot;);
	}
}

public void recoveryPenaltyValueAssign(){
	try{
		if(${__javaScript(vars.get(&quot;memRecoveryPen&quot;+vars.get(&quot;counterLoan&quot;))!=null)}){
			if(vars.get(&quot;memRecoveryPen&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
				if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
					vars.put(&quot;preRecoveryPen&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;recovery_penalty&quot;));
				}
				else{
					vars.put(&quot;postRecoveryPen&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;recovery_penalty&quot;));
				}
			}
			else{
				if(vars.get(&quot;memRecoveryPen&quot;+vars.get(&quot;counterLoan&quot;)).equals(&quot;&quot;)){
				//	log.info(&quot;Recovery penalty mapping has been skipped&quot;);
				}
				else{
					//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					String messageFailure=vars.get(&quot;messageFailure&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Null value returned from webservice for loan recovery penalty&quot;;
					}
					else{
						messageFailure=&quot;Null value returned from webservice for loan recovery penalty&quot;;
					}
					log.info(&quot;Null value returned from webservice for loan recovery penalty&quot;);
				}
			}
		}
		else{
			//log.info(&quot;Recovery penalty mapping has been skipped&quot;);
		}
	}
	catch(Exception ex){
		//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Recovery penalty assigning failure message&quot;;
		}
		else{
			messageFailure=&quot;Recovery penalty assigning failure message&quot;;
		}
		log.info(&quot;Recovery penalty assigning failure message&quot;);
	}
}

//Main comparison starts here

if(prev.getResponseCode().equals(&quot;404&quot;)){
	vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
	vars.put(&quot;loanCodeRes&quot;,&quot;404&quot;);
	Failure=true;
	FailureMessage=&quot;Webservice failed for LoanBalance&quot;+vars.get(&quot;counterLoan&quot;);
	String messageFailure=vars.get(&quot;messageFailure&quot;);
	if(messageFailure.length()&gt;0){
		messageFailure=messageFailure+&quot;;&quot;+FailureMessage;
	}
	else{
		messageFailure=FailureMessage;
	}
	vars.put(&quot;messageFailure&quot;,messageFailure);
}
else if(vars.get(&quot;loanError&quot;).length()&gt;0){
	if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
		if(vars.get(&quot;memLoan&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
			vars.put(&quot;preLoanBalance&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;preReceivableInt&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;preReceivablePri&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;preReceivablePen&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;preRecoveryPri&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;preRecoveryInt&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;preRecoveryPen&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			int counterLoan=Integer.parseInt(vars.get(&quot;counterLoan&quot;));
			counterLoan++;
			vars.put(&quot;maxPreLoanCount&quot;,vars.get(&quot;counterLoan&quot;));
			vars.put(&quot;counterLoan&quot;,counterLoan.toString());
		}
		else{
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
			Failure=true;
			FailureMessage=&quot;Null value present in memberLoan&quot;;
		}
	}
	else if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;1&quot;)){
		if(vars.get(&quot;memLoan&quot;+vars.get(&quot;counterLoan&quot;)).length()&gt;0){
			vars.put(&quot;postLoanBalance&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;postReceivableInt&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;postReceivablePri&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;postReceivablePen&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;postRecoveryPri&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;postRecoveryInt&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			vars.put(&quot;postRecoveryPen&quot;+vars.get(&quot;counterLoan&quot;),&quot;0&quot;);
			int counterLoan=Integer.parseInt(vars.get(&quot;counterLoan&quot;));
			counterLoan++;
			vars.put(&quot;maxPostLoanCount&quot;,vars.get(&quot;counterLoan&quot;));
			vars.put(&quot;counterLoan&quot;,counterLoan.toString());
		}
		else{
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
			Failure=true;
			FailureMessage=&quot;Null value present in memberLoan&quot;;
		}
	}
}
else{
	if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
		try{
			if(vars.get(&quot;loanBalance&quot;).length()&gt;0){
				vars.put(&quot;preLoanBalance&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;loanBalance&quot;));
			//Other optional components called here
				loanReceivablePrincipalAssign();
				loanReceivableInterestAssign();
				loanReceivablePenaltyAssign();
				recoveryPrincipalValueAssign();
				recoveryInterestValueAssign();
				recoveryPenaltyValueAssign();
				loanStatusAssign();

			//Assign and compare here for failures in another optional parameters or not
				String messageFailure=vars.get(&quot;messageFailure&quot;);
				vars.put(&quot;maxPreLoanCount&quot;,vars.get(&quot;counterLoan&quot;));
				if(messageFailure.length()&gt;0){
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
				}
				else{
					int counterLoan=Integer.parseInt(vars.get(&quot;counterLoan&quot;));
					counterLoan++;
					vars.put(&quot;counterLoan&quot;,counterLoan.toString());
				}
								
			}
			else{
				String messageFailure=vars.get(&quot;messageFailure&quot;);
				vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value returned&quot;+vars.get(&quot;loanError&quot;);
				}
				else{
					messageFailure=&quot;Null value returned&quot;+vars.get(&quot;loanError&quot;);
				}

			}
		}
		catch(Exception ex){
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
			String messageFailure=vars.get(&quot;messageFailure&quot;);
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;Loan Balance no value returned&quot;;
			}
			else{
				messageFailure=&quot;Loan Balance no value returned&quot;;
			}
			vars.put(&quot;messageFailure&quot;,messageFailure);
		}
	}
    else if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;1&quot;)){
		int maxPreCondition=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));
		try{
			if(vars.get(&quot;loanBalance&quot;).length()&gt;0 &amp;&amp; Integer.parseInt(vars.get(&quot;counterLoan&quot;))&lt;=maxPreCondition){
				vars.put(&quot;postLoanBalance&quot;+vars.get(&quot;counterLoan&quot;),vars.get(&quot;loanBalance&quot;));
			
			//Other optional components called here
				loanReceivablePrincipalAssign();
				loanReceivableInterestAssign();
				loanReceivablePenaltyAssign();
				recoveryPrincipalValueAssign();
				recoveryInterestValueAssign();
				recoveryPenaltyValueAssign();
				loanStatusAssign();

			//Assign and compare here for failures in another optional parameters or not
				vars.put(&quot;maxPostLoanCount&quot;,vars.get(&quot;counterLoan&quot;));
				String messageFailure=vars.get(&quot;messageFailure&quot;);
				if(messageFailure.length()&gt;0){
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
				}
				else{
					int counterLoan=Integer.parseInt(vars.get(&quot;counterLoan&quot;));
					counterLoan++;
					vars.put(&quot;counterLoan&quot;,counterLoan.toString());
				}
								
			}
			else{
				String messageFailure=vars.get(&quot;messageFailure&quot;);
				//vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value returned&quot;+vars.get(&quot;loanError&quot;);
				}
				else{
					messageFailure=&quot;Null value returned&quot;+vars.get(&quot;loanError&quot;);
					
				}

			}
		}
		catch(Exception ex){
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
			String messageFailure=vars.get(&quot;messageFailure&quot;);
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;Loan Balance no value returned&quot;;
			}
			else{
				messageFailure=&quot;Loan Balance no value returned&quot;;
			}
			vars.put(&quot;messageFailure&quot;,messageFailure);
		}
		
    }
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">idPath</stringProp>
          <stringProp name="ForeachController.returnVal"></stringProp>
          <boolProp name="ForeachController.useSeparator">false</boolProp>
        </ForeachController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${accountBalanceChecker}&quot;==&quot;true&quot; &amp;&amp; &quot;${__V(accBal${counterAccount})}&quot;!=&quot;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AccountHead Balance ${counterAccount}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/mfinws/mfinServices/ledger/${__V(idPath${counterAccount})}/${bCode}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accountBalance</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..balance</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor accountBalanceError" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accountError</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.error</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">beanshell</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">String messageFailure;
if(prev.getResponseCode().equals(&quot;404&quot;)){
	Failure=true;
	vars.put(&quot;accountBalanceChecker&quot;,&quot;false&quot;);
	vars.put(&quot;accountCodeRes&quot;,&quot;404&quot;);
	FailureMessage=&quot;WebService failed for AccountBalance&quot;+vars.get(&quot;counterAccount&quot;);
	messageFailure=vars.get(&quot;messageFailure&quot;);
	if(messageFailure.length()&gt;0){
		messageFailure=messageFailure+&quot;;&quot;+FailureMessage;
	}
	else{
		messageFailure=FailureMessage;
	}
	vars.put(&quot;messageFailure&quot;,messageFailure);
}
else if(vars.get(&quot;accountError&quot;).length()&gt;0){
	if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
		if(vars.get(&quot;accBal&quot;+vars.get(&quot;counterAccount&quot;)).length()&gt;0){
			vars.put(&quot;preAccountBalance&quot;+vars.get(&quot;counterAccount&quot;),&quot;0&quot;);
			int counterAccount=Integer.parseInt(vars.get(&quot;counterAccount&quot;));
			counterAccount++;
			vars.put(&quot;maxPreAccountCount&quot;,vars.get(&quot;counterAccount&quot;));
			vars.put(&quot;counterAccount&quot;,counterAccount.toString());
		}
		else{
			vars.put(&quot;accountBalanceChecker&quot;,&quot;false&quot;);
			FailureMessage=&quot;Null value present in accBal&quot;+vars.get(&quot;counterAccount&quot;);
		}
	}
	else if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;1&quot;)){
		if(vars.get(&quot;accBal&quot;+vars.get(&quot;counterAccount&quot;)).length()&gt;0){
			vars.put(&quot;postAccountBalance&quot;+vars.get(&quot;counterAccount&quot;),&quot;0&quot;);
			int counterAccount=Integer.parseInt(vars.get(&quot;counterAccount&quot;));
			counterAccount++;
			vars.put(&quot;maxPostAccountCount&quot;,vars.get(&quot;counterAccount&quot;));
			vars.put(&quot;counterAccount&quot;,counterAccount.toString());
		}
		else{
			vars.put(&quot;accountBalanceChecker&quot;,&quot;false&quot;);
			FailureMessage=&quot;Null value present in accBal&quot;+vars.get(&quot;counterAccount&quot;);
		}
	}
		
}
else{
	if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
		try{
			if(vars.get(&quot;accountBalance&quot;).length()&gt;0){
				vars.put(&quot;preAccountBalance&quot;+vars.get(&quot;counterAccount&quot;),vars.get(&quot;accountBalance&quot;));
				int counterAccount=Integer.parseInt(vars.get(&quot;counterAccount&quot;));
				counterAccount++;
				vars.put(&quot;maxPreAccountCount&quot;,vars.get(&quot;counterAccount&quot;));
				vars.put(&quot;counterAccount&quot;,counterAccount.toString());
			}
			else{
				messageFailure=vars.get(&quot;messageFailure&quot;);
				//vars.put(&quot;accountBalanceChecker&quot;,&quot;false&quot;);
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value returned&quot;+vars.get(&quot;accountError&quot;);
				}
				else{
					messageFailure=&quot;Null value returned&quot;+vars.get(&quot;accountError&quot;);
				}

			}
		}
		catch(Exception ex){
			//vars.put(&quot;accountBalanceChecker&quot;,&quot;false&quot;);
			messageFailure=vars.get(&quot;messageFailure&quot;);
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;Account Balance no value returned&quot;;
			}
			else{
				messageFailure=&quot;Account Balance no value returned&quot;;
			}
			vars.put(&quot;messageFailure&quot;,messageFailure);
		}
	}
    else if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;1&quot;)){
		int maxPreCondition=Integer.parseInt(vars.get(&quot;maxPreAccountCount&quot;));
		try{
			if(vars.get(&quot;accountBalance&quot;).length()&gt;0 &amp;&amp; Integer.parseInt(vars.get(&quot;counterAccount&quot;))&lt;=maxPreCondition){
				vars.put(&quot;postAccountBalance&quot;+vars.get(&quot;counterAccount&quot;),vars.get(&quot;accountBalance&quot;));
				int counterAccount=Integer.parseInt(vars.get(&quot;counterAccount&quot;));
				counterAccount++;
				vars.put(&quot;maxPostAccountCount&quot;,vars.get(&quot;counterAccount&quot;));
				vars.put(&quot;counterAccount&quot;,counterAccount.toString());
			}
			else{
				messageFailure=vars.get(&quot;messageFailure&quot;);
				//vars.put(&quot;accountBalanceChecker&quot;,&quot;false&quot;);
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value returned&quot;+vars.get(&quot;accountError&quot;);
				}
				else{
					messageFailure=&quot;Null value returned&quot;+vars.get(&quot;accountError&quot;);
				}
			}
		}
		catch(Exception ex){
			//vars.put(&quot;accountBalanceChecker&quot;,&quot;false&quot;);
			messageFailure=vars.get(&quot;messageFailure&quot;);
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;Account Balance no value returned&quot;;
			}
			else{
				messageFailure=&quot;Account Balance no value returned&quot;;
			}
			vars.put(&quot;messageFailure&quot;,messageFailure);
		}	
    }
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Balance Verifier" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">//Assign header files here
import java.lang.*;
import java.math.BigDecimal;
import java.math.RoundingMode;

public void loanBalanceComparison(){
	String messageFailure=vars.get(&quot;messageFailure&quot;);
	int i;
	if(vars.get(&quot;maxPreLoanCount&quot;).equals(vars.get(&quot;maxPostLoanCount&quot;))){
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			try{
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preLoanBalance&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postLoanBalance&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=preBal.subtract(postBal);
				BigDecimal fileValue=new BigDecimal(vars.get(&quot;memOut&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				if(difference.compareTo(fileValue)==0){
					//log.info(&quot;Comparison passed here&quot;);
				}
				else{
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;LoanBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;memOut&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;;
					}
					else{
						messageFailure=&quot;LoanBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;memOut&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;;
					}
					log.info(&quot;LoanBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;memOut&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;);
					break;
				}
			}
			catch(Exception ex){
				vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
				if(${__javaScript(vars.get(&quot;preLoanBalance&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postLoanBalance&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;memOut&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;All values for loan balance comparison null&quot;;
					}
					else{
						messageFailure=&quot;All values for loan balance comparison null&quot;;
					}
				}
				else{
					if(${__javaScript(vars.get(&quot;preLoanBalance&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;PreLoanBalance&quot;+i+&quot; is null&quot;;
						}
						else{
							messageFailure=&quot;PreLoanBalance&quot;+i+&quot; is null&quot;;
						}
					}
					if(${__javaScript(vars.get(&quot;postLoanBalance&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;PostLoanBalance&quot;+i+&quot; is null&quot;;
						}
						else{
							messageFailure=&quot;PostLoanBalance&quot;+i+&quot; is null&quot;;
						}
					}
					if(${__javaScript(vars.get(&quot;memOut&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;Null value in member file memOut&quot;+i;
						}
						else{
							messageFailure=&quot;Null value in member file memOut&quot;+i;
						}
					}
				}	
			}
		}
	}
	else{
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Mismatched number of pre and post conditions for loan balance comparison&quot;;
		}
		log.info(&quot;Mismatched number of pre and post conditions for loan balance comparison&quot;);
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);

}

//optional as required
public void loanStatusComparison(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;); 
	try{
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			if(${__javaScript(vars.get(&quot;memLoanStatus&quot;+vars.get(&quot;counterTemp&quot;))!=null)}){
				if(vars.get(&quot;memLoanStatus&quot;+vars.get(&quot;counterTemp&quot;)).length()&gt;0){
				if(vars.get(&quot;postLoanStatus&quot;+i).equals(vars.get(&quot;memLoanStatus&quot;+i))){
					log.info(&quot;Status comparison passed&quot;);
				}
				else{
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Loan status comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memLoanStatus&quot;+i)+&quot;)(actual:&quot;+vars.get(&quot;postLoanStatus&quot;+i)+&quot;)&quot;;
					}
					else{
						messageFailure=&quot;Loan status comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memLoanStatus&quot;+i)+&quot;)(actual:&quot;+vars.get(&quot;postLoanStatus&quot;+i)+&quot;)&quot;;
					}
					log.info(&quot;Loan status comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memLoanStatus&quot;+i)+&quot;)(actual:&quot;+vars.get(&quot;postLoanStatus&quot;+i)+&quot;)&quot;);
					break;
				}
			}
			else{
				//log.info(&quot;Loan status comparison skipped&quot;);
				break;
			}
			}
			else{
				//log.info(&quot;Loan status comparison skipped&quot;);
				break;
			}
		}
	}
	catch(Exception ex){
		if(${__javaScript(vars.get(&quot;memLoanStatus&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;preLoanStatus&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postLoanStatus&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;All values passed for comparison pre and post and files are null&quot;;
			}
			else{
				messageFailure=&quot;All values passed for comparison pre and post and files are null&quot;;
			}
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			if(${__javaScript(vars.get(&quot;memLoanStatus&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for memLoanStatus&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for memLoanStatus&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;preLoanStatus&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for preLoanStatus&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for preLoanStatus&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;postLoanStatus&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for postLoanStatus&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for postLoanStatus&quot;+i;
				}
			}
		}
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);	
}


public void loanReceivablePrincipleComparsion(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;); 
	try{
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			if(${__javaScript(vars.get(&quot;memReceivablePri&quot;+vars.get(&quot;counterTemp&quot;))!=null)}){
				if(vars.get(&quot;memReceivablePri&quot;+vars.get(&quot;counterTemp&quot;)).length()&gt;0){
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preReceivablePri&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postReceivablePri&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=postBal.subtract(preBal);
				BigDecimal fileValue=new BigDecimal(vars.get(&quot;memReceivablePri&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				if(difference.compareTo(fileValue)==0){
					log.info(&quot;Loan Receivable principal comparison passed&quot;);
				}
				else{
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Loan receivable principal comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivablePri&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					else{
						messageFailure=&quot;Loan receivable principal comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivablePri&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					log.info(&quot;Loan receivable principal comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivablePri&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;);
					break;
				}
			}
			else{
				//log.info(&quot;Loan receivable principal comparison skipped&quot;);
				break;
			}
			}
			else{
				//log.info(&quot;Loan receivable principal comparison skipped&quot;);
				break;
			}
		}
	}
	catch(Exception ex){
		if(${__javaScript(vars.get(&quot;memReceivablePri&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;preReceivablePri&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postReceivablePri&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;All values passed for comparison pre and post and files are null&quot;;
			}
			else{
				messageFailure=&quot;All values passed for comparison pre and post and files are null&quot;;
			}
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			if(${__javaScript(vars.get(&quot;memReceivablePri&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for memReceivablePri&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for memReceivablePri&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;preReceivablePri&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for preReceivablePri&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for preReceivablePri&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;postReceivablePri&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for postReceivablePri&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for postReceivablePri&quot;+i;
				}
			}
		}
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);	
}

public void loanReceivableInterestComparison(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;); 
	try{
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			if(${__javaScript(vars.get(&quot;memReceivableInt&quot;+vars.get(&quot;counterTemp&quot;))!=null)}){
				if(vars.get(&quot;memReceivableInt&quot;+vars.get(&quot;counterTemp&quot;)).length()&gt;0){
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preReceivableInt&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postReceivableInt&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=postBal.subtract(preBal);
				BigDecimal fileValue=new BigDecimal(vars.get(&quot;memReceivableInt&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				if(difference.compareTo(fileValue)==0){
					log.info(&quot;Loan Receivable interest comparison passed&quot;);
				}
				else{
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Loan receivable interest comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivableInt&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					else{
						messageFailure=&quot;Loan receivable interest comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivableInt&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					log.info(&quot;Loan receivable interest comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivableInt&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;);
					break;
				}
			}
			else{
				//log.info(&quot;Loan receivable interest comparison skipped&quot;);
				break;
			}
			}
			else{
				//log.info(&quot;Loan receivable interest comparison skipped&quot;);
				break;
			}
		}
	}
	catch(Exception ex){
		if(${__javaScript(vars.get(&quot;memReceivableInt&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;preReceivableInt&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postReceivableInt&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;All values passed for comparison pre and post and files are null&quot;;
			}
			else{
				messageFailure=&quot;All values passed for comparison pre and post and files are null&quot;;
			}
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			if(${__javaScript(vars.get(&quot;memReceivableInt&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for memReceivableInt&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for memReceivableInt&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;preReceivableInt&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for preReceivableInt&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for preReceivableInt&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;postReceivableInt&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for postReceivableInt&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for postReceivableInt&quot;+i;
				}
			}
		}
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);		
}

public void loanReceivablePenaltyComparison(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;); 
	try{
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			if(${__javaScript(vars.get(&quot;memReceivablePen&quot;+vars.get(&quot;counterTemp&quot;))!=null)}){
				if(vars.get(&quot;memReceivablePen&quot;+vars.get(&quot;counterTemp&quot;)).length()&gt;0){
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preReceivablePen&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postReceivablePen&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=postBal.subtract(preBal);
				BigDecimal fileValue=new BigDecimal(vars.get(&quot;memReceivablePen&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				if(difference.compareTo(fileValue)==0){
					log.info(&quot;Loan Receivable penalty comparison passed&quot;);
				}
				else{
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Loan receivable penalty comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivablePen&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					else{
						messageFailure=&quot;Loan receivable penalty comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivablePen&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					log.info(&quot;Loan receivable penalty comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memReceivablePen&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;);
					break;
				}
			}
			else{
				//log.info(&quot;Loan receivable penalty comparison skipped&quot;);
				break;
			}
			}
			else{
				//log.info(&quot;Loan receivable penalty comparison skipped&quot;);
				break;
			}
		}
	}
	catch(Exception ex){
		if(${__javaScript(vars.get(&quot;memReceivablePen&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;preReceivablePen&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postReceivablePen&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;All values passed for comparison pre and post and files are null&quot;;
			}
			else{
				messageFailure=&quot;All values passed for comparison pre and post and files are null&quot;;
			}
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			if(${__javaScript(vars.get(&quot;memReceivablePen&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for memReceivablePen&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for memReceivablePen&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;preReceivablePen&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for preReceivablePen&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for preReceivablePen&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;postReceivablePen&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for postReceivablePen&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for postReceivablePen&quot;+i;
				}
			}
		}
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);	
}

public void loanRecoveryPrincipleComparison(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;); 
	try{
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			if(${__javaScript(vars.get(&quot;memRecoveryPri&quot;+vars.get(&quot;counterTemp&quot;))!=null)}){
				if(vars.get(&quot;memRecoveryPri&quot;+vars.get(&quot;counterTemp&quot;)).length()&gt;0){
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preRecoveryPri&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postRecoveryPri&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=postBal.subtract(preBal);
				BigDecimal fileValue=new BigDecimal(vars.get(&quot;memRecoveryPri&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				if(difference.compareTo(fileValue)==0){
					log.info(&quot;Loan Recovery principal comparison passed&quot;);
				}
				else{
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Loan recovery principal comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryPri&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					else{
						messageFailure=&quot;Loan recovery principal comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryPri&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					log.info(&quot;Loan recovery principal comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryPri&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;);
					break;
				}
			}
			else{
				//log.info(&quot;Loan recovery principal comparison skipped&quot;);
				break;
			}
			}
			else{
				//log.info(&quot;Loan recovery principal comparison skipped&quot;);
				break;
			}
		}
	}
	catch(Exception ex){
		if(${__javaScript(vars.get(&quot;memRecoveryPri&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;preRecoveryPri&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postRecoveryPri&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;All values passed for comparison pre and post and files are null&quot;;
			}
			else{
				messageFailure=&quot;All values passed for comparison pre and post and files are null&quot;;
			}
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			if(${__javaScript(vars.get(&quot;memRecoveryPri&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for memRecoveryPri&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for memRecoveryPri&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;preRecoveryPri&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for preRecoveryPri&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for preRecoveryPri&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;postRecoveryPri&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for postRecoveryPri&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for postRecoveryPri&quot;+i;
				}
			}
		}
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);
}

public void loanRecoveryInterestComparison(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;); 
	try{
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			if(${__javaScript(vars.get(&quot;memRecoveryInt&quot;+vars.get(&quot;counterTemp&quot;))!=null)}){
				if(vars.get(&quot;memRecoveryInt&quot;+vars.get(&quot;counterTemp&quot;)).length()&gt;0){
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preRecoveryInt&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postRecoveryInt&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=postBal.subtract(preBal);
				BigDecimal fileValue= new BigDecimal(vars.get(&quot;memRecoveryInt&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				if(difference.compareTo(fileValue)==0){
					log.info(&quot;Loan Recovery interest comparison passed&quot;);
				}
				else{
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Loan recovery interest comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryInt&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					else{
						messageFailure=&quot;Loan recovery interest comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryInt&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					log.info(&quot;Loan recovery interest comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryInt&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;);
					break;
				}
			}
			else{
				//log.info(&quot;Loan recovery interest comparison skipped&quot;);
				break;
			}
			}
			else{
				//log.info(&quot;Loan recovery interest comparison skipped&quot;);
				break;
			}
		}
	}
	catch(Exception ex){
		if(${__javaScript(vars.get(&quot;memRecoveryInt&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;preRecoveryInt&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postRecoveryInt&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;All values passed for comparison pre and post and files are null&quot;;
			}
			else{
				messageFailure=&quot;All values passed for comparison pre and post and files are null&quot;;
			}
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			if(${__javaScript(vars.get(&quot;memRecoveryInt&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for memRecoveryInt&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for memRecoveryInt&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;preRecoveryInt&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for preRecoveryInt&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for preRecoveryInt&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;postRecoveryInt&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for postRecoveryInt&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for postRecoveryInt&quot;+i;
				}
			}
		}
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);	
}

public void loanRecoveryPenaltyComparison(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;); 
	try{
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreLoanCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			if(${__javaScript(vars.get(&quot;memRecoveryPen&quot;+vars.get(&quot;counterTemp&quot;))!=null)}){
				if(vars.get(&quot;memRecoveryPen&quot;+vars.get(&quot;counterTemp&quot;)).length()&gt;0){
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preRecoveryPen&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postRecoveryPen&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=postBal.subtract(preBal);
				BigDecimal fileValue=new BigDecimal(vars.get(&quot;memRecoveryPen&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				if(difference.compareTo(fileValue)==0){
					log.info(&quot;Loan Recovery penalty comparison passed&quot;);
				}
				else{
					vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;Loan recovery penalty comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryPen&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					else{
						messageFailure=&quot;Loan recovery penalty comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryPen&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;;
					}
					log.info(&quot;Loan recovery penalty comparison failed for LoanAccount&quot;+i+&quot;(expected:&quot;+vars.get(&quot;memRecoveryPen&quot;+i)+&quot;)(actual:&quot;+difference+&quot;)&quot;);
					break;
				}
			}
			else{
				//log.info(&quot;Loan recovery penalty comparison skipped&quot;);
				break;
			}
			}
			else{
				//log.info(&quot;Loan recovery penalty comparison skipped&quot;);
				break;
			}
		}
	}
	catch(Exception ex){
		if(${__javaScript(vars.get(&quot;memRecoveryPen&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;preRecoveryPen&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postRecoveryPen&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
			if(messageFailure.length()&gt;0){
				messageFailure=messageFailure+&quot;;All values passed for comparison pre and post and files are null&quot;;
			}
			else{
				messageFailure=&quot;All values passed for comparison pre and post and files are null&quot;;
			}
			vars.put(&quot;loanBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			if(${__javaScript(vars.get(&quot;memRecoveryPen&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for memRecoveryPen&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for memRecoveryPen&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;preRecoveryPen&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for preRecoveryPen&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for preRecoveryPen&quot;+i;
				}
			}
			if(${__javaScript(vars.get(&quot;postRecoveryPen&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
				if(messageFailure.length()&gt;0){
					messageFailure=messageFailure+&quot;;Null value present for postRecoveryPen&quot;+i;
				}
				else{
					messageFailure=&quot;Null value present for postRecoveryPen&quot;+i;
				}
			}
		}
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);
}


//Acount Balance Comparison 
public void accountBalanceComparison(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;);
	if(vars.get(&quot;maxPreAccountCount&quot;).equals(vars.get(&quot;maxPostAccountCount&quot;))){
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreAccountCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			try{
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preAccountBalance&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postAccountBalance&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=postBal.subtract(preBal);
				BigDecimal fileValue=new BigDecimal(vars.get(&quot;accBal&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				if(difference.compareTo(fileValue)==0){
					log.info(&quot;Account Comparison passed here&quot;);
				}
				else{
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;AccountBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;accBal&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;;
					}
					else{
						messageFailure=&quot;AccountBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;accBal&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;;
					}
					log.info(&quot;AccountBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;accBal&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;);
					break;
				}
			}
			catch(Exception ex){
				vars.put(&quot;accountBalanceChecker&quot;,&quot;false&quot;);
				if(${__javaScript(vars.get(&quot;preAccountBalance&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postAccountBalance&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;accBal&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;All values for account balance comparison null&quot;;
					}
					else{
						messageFailure=&quot;All values for account balance comparison null&quot;;
					}
				}
				else{
					if(${__javaScript(vars.get(&quot;preAccountBalance&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;PreAccountBalance&quot;+i+&quot; is null&quot;;
						}
						else{
							messageFailure=&quot;PreAccountBalance&quot;+i+&quot; is null&quot;;
						}
					}
					if(${__javaScript(vars.get(&quot;postAccountBalance&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;PostAccountBalance&quot;+i+&quot; is null&quot;;
						}
						else{
							messageFailure=&quot;PostAccountBalance&quot;+i+&quot; is null&quot;;
						}
					}
					if(${__javaScript(vars.get(&quot;accBal&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;Null value in member file accBal&quot;+i;
						}
						else{
							messageFailure=&quot;Null value in member file accBal&quot;+i;
						}
					}
				}	
			}
		}
	}
	else{
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Mismatched number of pre and post conditions for account balance comparison&quot;;
		}
		log.info(&quot;Mismatched number of pre and post conditions for account balance comparison&quot;);
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);
}

//saving Balance Comparison
public void savingBalanceComparison(){
	int i;
	String messageFailure=vars.get(&quot;messageFailure&quot;);
	if(vars.get(&quot;maxPreSavingCount&quot;).equals(vars.get(&quot;maxPostSavingCount&quot;))){
		for(i=1;i&lt;=Integer.parseInt(vars.get(&quot;maxPreSavingCount&quot;));i++){
			vars.put(&quot;counterTemp&quot;,i.toString());
			try{
				BigDecimal preBal=new BigDecimal(vars.get(&quot;preSavingBalance&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal postBal=new BigDecimal(vars.get(&quot;postSavingBalance&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				BigDecimal difference=postBal.subtract(preBal);
				BigDecimal fileValue=new BigDecimal(vars.get(&quot;memBal&quot;+i)).setScale(2,RoundingMode.HALF_UP);
				log.info(difference.toString());
				if(difference.compareTo(fileValue)==0){
					log.info(&quot;Saving Comparison passed here&quot;);
				}
				else{
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;SavingBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;memBal&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;;
					}
					else{
						messageFailure=&quot;SavingBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;memBal&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;;
					}
					log.info(&quot;SavingBalance&quot;+i+&quot; has failed (expected:&quot;+ vars.get(&quot;memBal&quot;+i)+ &quot;) (actual:&quot;+ difference+ &quot;)&quot;);
					break;
				}
			}
			catch(Exception ex){
				vars.put(&quot;savingBalanceChecker&quot;,&quot;false&quot;);
				if(${__javaScript(vars.get(&quot;preSavingBalance&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;postSavingBalance&quot;+vars.get(&quot;counterTemp&quot;))==null &amp;&amp; vars.get(&quot;memBal&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
					if(messageFailure.length()&gt;0){
						messageFailure=messageFailure+&quot;;All values for saving balance comparison null&quot;;
					}
					else{
						messageFailure=&quot;All values for saving balance comparison null&quot;;
					}
				}
				else{
					if(${__javaScript(vars.get(&quot;preSavingBalance&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;PreSavingBalance&quot;+i+&quot; is null&quot;;
						}
						else{
							messageFailure=&quot;PreSavingBalance&quot;+i+&quot; is null&quot;;
						}
					}
					if(${__javaScript(vars.get(&quot;postSavingBalance&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;PostSavingBalance&quot;+i+&quot; is null&quot;;
						}
						else{
							messageFailure=&quot;PostSavingBalance&quot;+i+&quot; is null&quot;;
						}
					}
					if(${__javaScript(vars.get(&quot;memBal&quot;+vars.get(&quot;counterTemp&quot;))==null)}){
						if(messageFailure.length()&gt;0){
							messageFailure=messageFailure+&quot;;Null value in member file memBal&quot;+i;
						}
						else{
							messageFailure=&quot;Null value in member file memBal&quot;+i;
						}
					}
				}
			}
		}
	}
	else{
		String messageFailure=vars.get(&quot;messageFailure&quot;);
		if(messageFailure.length()&gt;0){
			messageFailure=messageFailure+&quot;;Mismatched number of pre and post conditions for saving balance comparison&quot;;
		}
		log.info(&quot;Mismatched number of pre and post conditions for saving balance comparison&quot;);
	}
	vars.put(&quot;counterTemp&quot;,&quot;1&quot;);
	vars.put(&quot;messageFailure&quot;,messageFailure);
}

//Restore variables
public void restoreVariables(){
	vars.put(&quot;initialValidateValue&quot;,&quot;0&quot;);
	vars.put(&quot;savingBalanceChecker&quot;,&quot;true&quot;);
	vars.put(&quot;loanBalanceChecker&quot;,&quot;true&quot;);
	vars.put(&quot;accountBalanceChecker&quot;,&quot;true&quot;);
	vars.put(&quot;counterSaving&quot;,&quot;1&quot;);
	vars.put(&quot;counterLoan&quot;,&quot;1&quot;);
	vars.put(&quot;counterAccount&quot;,&quot;1&quot;);
	vars.put(&quot;savingCodeRes&quot;,&quot;&quot;);
	vars.put(&quot;loanCodeRes&quot;,&quot;&quot;);
	vars.put(&quot;accountCodeRes&quot;,&quot;&quot;);
	vars.remove(&quot;maxPreLoanCount&quot;);
	vars.remove(&quot;maxPostLoanCount&quot;);
	vars.remove(&quot;maxPreSavingCount&quot;);
	vars.remove(&quot;maxPostSavingCount&quot;);
	vars.remove(&quot;maxPreAccountCount&quot;);
	vars.remove(&quot;maxPostAccountCount&quot;);
	vars.remove(&quot;receivable_principal&quot;);
	vars.remove(&quot;receivable_principal_matchNr&quot;);
	vars.remove(&quot;receivable_interest&quot;);
	vars.remove(&quot;receivable_interest_matchNr&quot;);
	vars.remove(&quot;receivable_penalty&quot;);
	vars.remove(&quot;receivable_penalty_matchNr&quot;);
	vars.remove(&quot;recovery_principal&quot;);
	vars.remove(&quot;recovery_principal_matchNr&quot;);
	vars.remove(&quot;recovery_interest&quot;);
	vars.remove(&quot;recovery_interest_matchNr&quot;);
	vars.remove(&quot;recovery_penalty&quot;);
	vars.remove(&quot;recovery_penalty_matchNr&quot;);
	vars.remove(&quot;loanStatus&quot;);
	vars.remove(&quot;loanStatus_matchNr&quot;);
	vars.remove(&quot;savingBalance&quot;);
	vars.remove(&quot;savingBalance_matchNr&quot;);
	vars.remove(&quot;accountBalance&quot;);
	vars.remove(&quot;accountBalance_matchNr&quot;);
	vars.remove(&quot;savingError&quot;);
	vars.remove(&quot;accountError&quot;);
	vars.remove(&quot;loanError&quot;);
	vars.remove(&quot;savingError_matchNr&quot;);
	vars.remove(&quot;accountError_matchNr&quot;);
	vars.remove(&quot;loanError_matchNr&quot;);
}

//Main comparison will start here
if(vars.get(&quot;initialValidateValue&quot;).equals(&quot;0&quot;)){
	int incrementValidator=Integer.parseInt(vars.get(&quot;initialValidateValue&quot;));
	incrementValidator++;
	vars.put(&quot;initialValidateValue&quot;,incrementValidator.toString());
	vars.put(&quot;counterSaving&quot;,&quot;1&quot;);
	vars.put(&quot;counterLoan&quot;,&quot;1&quot;);
	vars.put(&quot;counterAccount&quot;,&quot;1&quot;);
	vars.put(&quot;BalanceChecker&quot;,&quot;true&quot;);
	vars.put(&quot;loanBalanceChecker&quot;,&quot;true&quot;);
	vars.put(&quot;savingBalanceChecker&quot;,&quot;true&quot;);
	vars.put(&quot;accountBalanceChecker&quot;,&quot;true&quot;);
	vars.remove(&quot;savingBalance&quot;);
	vars.remove(&quot;savingError&quot;);
	vars.remove(&quot;loanBalance&quot;);
	vars.remove(&quot;loanError&quot;);
	vars.remove(&quot;loanStatus&quot;);
	vars.remove(&quot;receivable_principal&quot;);
	vars.remove(&quot;receivable_interest&quot;);
	vars.remove(&quot;receivable_penalty&quot;);
	vars.remove(&quot;recovery_principal&quot;);
	vars.remove(&quot;recovery_interest&quot;);
	vars.remove(&quot;recovery_penalty&quot;);
	vars.remove(&quot;accountBalance&quot;);
	vars.remove(&quot;accountError&quot;);
}
else{
	//Main comparisons logics functional here
	if(${__javaScript(vars.get(&quot;maxPreAccountCount&quot;)!=null)}){
		accountBalanceComparison();
	}
	if(${__javaScript(vars.get(&quot;maxPreLoanCount&quot;)!=null)}){
		loanBalanceComparison();
		loanStatusComparison();
		loanReceivablePrincipleComparsion();
		loanReceivableInterestComparison();
		loanReceivablePenaltyComparison();
		loanRecoveryPrincipleComparison();
		loanRecoveryInterestComparison();
		loanRecoveryPenaltyComparison();
	}
	if(${__javaScript(vars.get(&quot;maxPreSavingCount&quot;)!=null)}){
		savingBalanceComparison();
	}

	//Final comparisons
	String messageFailure=vars.get(&quot;messageFailure&quot;);
	if(messageFailure.length()&gt;0){
		vars.put(&quot;BalanceChecker&quot;,&quot;false&quot;);
	}
	else{
		vars.put(&quot;BalanceChecker&quot;,&quot;true&quot;);
	}
	//Restore variables functional call
	restoreVariables();
	messageFailure=null;
	//System.gc();
}
</stringProp>
          <stringProp name="scriptLanguage">beanshell</stringProp>
        </JSR223Sampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
