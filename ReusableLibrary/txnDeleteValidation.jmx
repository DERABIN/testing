<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="delSavBalanceChecker" elementType="Argument">
              <stringProp name="Argument.name">delSavBalanceChecker</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delLoanBalanceChecker" elementType="Argument">
              <stringProp name="Argument.name">delLoanBalanceChecker</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delAccBalanceChecker" elementType="Argument">
              <stringProp name="Argument.name">delAccBalanceChecker</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counterSaving" elementType="Argument">
              <stringProp name="Argument.name">counterSaving</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counterLoan" elementType="Argument">
              <stringProp name="Argument.name">counterLoan</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counterAccount" elementType="Argument">
              <stringProp name="Argument.name">counterAccount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="messageFailure" elementType="Argument">
              <stringProp name="Argument.name">messageFailure</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="savingCodeDel" elementType="Argument">
              <stringProp name="Argument.name">savingCodeDel</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanCodeDel" elementType="Argument">
              <stringProp name="Argument.name">loanCodeDel</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="accountCodeDel" elementType="Argument">
              <stringProp name="Argument.name">accountCodeDel</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Saving Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">memAcc</stringProp>
          <stringProp name="ForeachController.returnVal">memberAccount</stringProp>
          <boolProp name="ForeachController.useSeparator">false</boolProp>
        </ForeachController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${delSavBalanceChecker}&quot;==&quot;true&quot; &amp;&amp; &quot;${__V(delMemBal${counterSaving})}&quot;!=&quot;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Saving Account Balance ${counterSaving}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/mfinws/mfinServices/deposit/${memberAccount}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">delBalance</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..balance</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor savingError" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">savingDelError</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.error</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">if(ResponseCode.equals(&quot;404&quot;)){
	Failure=true;
	vars.put(&quot;delSavBalanceChecker&quot;,&quot;false&quot;);
	vars.put(&quot;savingCodeDel&quot;,&quot;404&quot;);
}
else{
	try{
		if(Float.parseFloat(&quot;${__V(delMemBal${counterSaving})}&quot;)!=Float.parseFloat(&quot;${delBalance}&quot;)){
			FailureMessage=&quot;Balance not matched&quot;;
			Failure=true;
			vars.put(&quot;delSavBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			int temp=Integer.parseInt(vars.get(&quot;counterSaving&quot;));
			temp++;
			vars.put(&quot;counterSaving&quot;,temp.toString());
		}

	}
	catch(Exception ex){
		vars.put(&quot;delSavBalanceChecker&quot;,&quot;false&quot;);
		if(&quot;${__V(delmemBal${counterSaving})}&quot;.equals(&quot;&quot;) &amp;&amp; &quot;${delBalance}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;Both entities for comparison null&quot;;
			Failure=true;
		}
		else if(&quot;${__V(delmemBal${counterSaving})}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;MemberBalance from file null cause of some cause&quot;;
			Failure=true;
		}
		else if(&quot;${delBalance}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;Saving Balance not captured&quot;+ &quot;${savingDelError}&quot;;
			Failure=true;
		}
		else{
			log.info(ex.printStackTrace());
			Failure=true;
			FailureMessage=&quot;See log file for finding cause of failure&quot;;
		}
	}
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Loan Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">delMemLoan</stringProp>
          <stringProp name="ForeachController.returnVal"></stringProp>
          <boolProp name="ForeachController.useSeparator">false</boolProp>
        </ForeachController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${delLoanBalanceChecker}&quot;==&quot;true&quot; &amp;&amp; &quot;${__V(delMemOut${counterLoan})}&quot;!=&quot;&quot;&amp;&amp; &quot;${__V(delMemLoan${counterLoan})}&quot;!=&quot;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loan Account Balance ${counterLoan}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/mfinws/mfinServices/loan/${__V(delMemLoan${counterLoan})}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">delLoanBalance</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..balance</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor savingError" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">loanDelError</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.error</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">if(ResponseCode.equals(&quot;404&quot;)){
	Failure=true;
	vars.put(&quot;delLoanBalanceChecker&quot;,&quot;false&quot;);
	vars.put(&quot;loanCodeDel&quot;,&quot;404&quot;);
}
else{
	try{

		if(Float.parseFloat(&quot;${__V(delMemOut${counterLoan})}&quot;)!=Float.parseFloat(&quot;${delLoanBalance}&quot;)){
			FailureMessage=&quot;Balance not matched&quot;;
			Failure=true;
			vars.put(&quot;delLoanBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			int temp=Integer.parseInt(vars.get(&quot;counterLoan&quot;));
			temp++;
			vars.put(&quot;counterLoan&quot;,temp.toString());
		}
	}

	catch(Exception ex){
		vars.put(&quot;delLoanBalanceChecker&quot;,&quot;false&quot;);
		if(&quot;${__V(delMemOut${counterSaving})}&quot;.equals(&quot;&quot;) &amp;&amp; &quot;${delLoanBalance}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;Both entities for comparison null&quot;;
			Failure=true;
		}
		else if(&quot;${__V(delMemOut${counterSaving})}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;MemberOutstanding from file has been modified to null&quot;;
			Failure=true;
		}
		else if(&quot;${delLoanBalance}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;Loan Outstanding not captured&quot;+ &quot;${loanDelError}&quot;;
			Failure=true;
		}
		else{
			log.info(ex.printStackTrace());
			Failure=true;
			FailureMessage=&quot;See log file for finding cause of failure&quot;;
		}
	}
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">idPath</stringProp>
          <stringProp name="ForeachController.returnVal"></stringProp>
          <boolProp name="ForeachController.useSeparator">false</boolProp>
        </ForeachController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${delAccBalanceChecker}&quot;==&quot;true&quot; &amp;&amp; &quot;${__V(delAccBal${counterAccount})}&quot;!=&quot;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AccountHead Balance ${counterAccount}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/mfinws/mfinServices/ledger/${__V(idPath${counterAccount})}/${bCode}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">delAccBalance</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..balance</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor savingError" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accDelError</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.error</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">if(ResponseCode.equals(&quot;404&quot;)){
	Failure=true;
	vars.put(&quot;delAccBalanceChecker&quot;,&quot;false&quot;);
	vars.put(&quot;accountCodeDel&quot;,&quot;404&quot;);
}
else{
	try{
		if(Float.parseFloat(&quot;${__V(delAccBal${counterAccount})}&quot;)!=Float.parseFloat(&quot;${delAccBalance}&quot;)){
			FailureMessage=&quot;Balance not matched&quot;;
			Failure=true;
			vars.put(&quot;delAccBalanceChecker&quot;,&quot;false&quot;);
		}
		else{
			int temp=Integer.parseInt(vars.get(&quot;counterAccount&quot;));
			temp++;
			vars.put(&quot;counterAccount&quot;,temp.toString());
		}
	}
	catch(Exception ex){
		vars.put(&quot;delAccBalanceChecker&quot;,&quot;false&quot;);
		if(&quot;${__V(delAccBal${counterAccount})}&quot;.equals(&quot;&quot;) &amp;&amp; &quot;${delAccBalance}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;Both entities for comparison null&quot;;
			Failure=true;
		}
		else if(&quot;${__V(delAccBal${counterAccount})}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;AccountBalance from file has been modified to null&quot;;
			Failure=true;
		}
		else if(&quot;${delAccBalance}&quot;.equals(&quot;&quot;)){
			FailureMessage=&quot;AccountHeadBalance not captured&quot;+ &quot;${accDelError}&quot;;
			Failure=true;
		}
		else{
			log.info(ex.printStackTrace());
			Failure=true;
			FailureMessage=&quot;See log file for finding cause of failure&quot;;
		}
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Transaction Delete Verification" enabled="true">
          <stringProp name="BeanShellSampler.query">if(&quot;${delSavBalanceChecker}&quot;.equals(&quot;false&quot;) || &quot;${delLoanBalanceChecker}&quot;.equals(&quot;false&quot;) || &quot;${delAccBalanceChecker}&quot;.equals(&quot;false&quot;)){
	vars.put(&quot;delBalanceChecker&quot;,&quot;false&quot;);
	if(&quot;${delSavBalanceChecker}&quot;.equals(&quot;false&quot;)){
		if(vars.get(&quot;messageFailure&quot;).equals(&quot;&quot;) &amp;&amp; vars.get(&quot;savingCodeDel&quot;).equals(&quot;404&quot;)){
			vars.put(&quot;messageFailure&quot;,&quot;Web service Failed for delSavingAccountBalance&quot;+vars.get(&quot;counterSaving&quot;)+&quot;with status 404 (expected :&quot;+&quot;${__V(delMemBal${counterSaving})}&quot;+&quot; )(actual :&quot;+&quot;${delBalance})&quot;);
		}
		else if(vars.get(&quot;messageFailure&quot;).equals(&quot;&quot;)){
			vars.put(&quot;messageFailure&quot;,&quot;delSavingAccountBalance&quot;+vars.get(&quot;counterSaving&quot;)+&quot;Failed&quot;+&quot;(expected :&quot;+&quot;${__V(delMemBal${counterSaving})}&quot;+&quot; )(actual :&quot;+&quot;${delBalance})&quot;);
		}
		else{
			vars.put(&quot;messageFailure&quot;,vars.get(&quot;messageFailure&quot;)+&quot;;delSavingAccountBalance&quot;+vars.get(&quot;counterSaving&quot;)+&quot;Failed&quot;+&quot;(expected :&quot;+&quot;${__V(delMemBal${counterSaving})}&quot;+&quot; )(actual :&quot;+&quot;${delBalance})&quot;);
		}

	}

	
	if(&quot;${delLoanBalanceChecker}&quot;.equals(&quot;false&quot;)){
		if(vars.get(&quot;messageFailure&quot;).equals(&quot;&quot;) &amp;&amp; vars.get(&quot;loanCodeDel&quot;).equals(&quot;404&quot;)){
			vars.put(&quot;messageFailure&quot;,&quot;Webservice Failed for delLoanAccountBalance&quot;+vars.get(&quot;counterLoan&quot;)+&quot;Failed&quot;+&quot;with status 404 (expected :&quot;+&quot;${__V(delMemOut${counterLoan})}&quot;+&quot; )(actual :&quot;+&quot;${delLoanBalance})&quot;);
		}
		else if(!vars.get(&quot;messageFailure&quot;).equals(&quot;&quot;) &amp;&amp; vars.get(&quot;loanCodeDel&quot;).equals(&quot;404&quot;)){
			vars.put(&quot;messageFailure&quot;,vars.get(&quot;messageFailure&quot;)+&quot;;Webservice Failed for delLoanAccountBalance&quot;+vars.get(&quot;counterLoan&quot;)+&quot;Failed&quot;+&quot;with status 404 (expected :&quot;+&quot;${__V(delMemOut${counterLoan})}&quot;+&quot; )(actual :&quot;+&quot;${delLoanBalance})&quot;);
		}
		else if(vars.get(&quot;messageFailure&quot;).equals(&quot;&quot;)){
			vars.put(&quot;messageFailure&quot;,&quot;delLoanAccountBalance&quot;+vars.get(&quot;counterLoan&quot;)+&quot;Failed&quot;+&quot;(expected :&quot;+&quot;${__V(delMemOut${counterLoan})}&quot;+&quot; )(actual :&quot;+&quot;${delLoanBalance})&quot;);
		}
		else{
			vars.put(&quot;messageFailure&quot;,vars.get(&quot;messageFailure&quot;)+&quot;;delLoanAccountBalance&quot;+vars.get(&quot;counterLoan&quot;)+&quot;Failed&quot;+&quot;(expected :&quot;+&quot;${__V(delMemOut${counterLoan})}&quot;+&quot; )(actual :&quot;+&quot;${delLoanBalance})&quot;);
		}
		
	}

	
	if(&quot;${delAccBalanceChecker}&quot;.equals(&quot;false&quot;)){
		if(vars.get(&quot;messageFailure&quot;).equals(&quot;&quot;) &amp;&amp; vars.get(&quot;accountCodeDel&quot;).equals(&quot;404&quot;)){
			vars.put(&quot;messageFailure&quot;,&quot;Web Service Failed for delAccountHeadBalance&quot;+vars.get(&quot;counterAccount&quot;)+&quot;Failed&quot;+&quot;with status 404 (expected :&quot;+&quot;${__V(delAccBal${counterAccount})}&quot;+&quot; )(actual :&quot;+&quot;${delAccBalance})&quot;);
		}
		else if(!vars.get(&quot;messageFailure&quot;).equals(&quot;&quot;) &amp;&amp; vars.get(&quot;accountCodeDel&quot;).equals(&quot;404&quot;)){
			vars.put(&quot;messageFailure&quot;,vars.get(&quot;messageFailure&quot;)+&quot;;Web Service Failed for delAccountHeadBalance&quot;+vars.get(&quot;counterAccount&quot;)+&quot;Failed&quot;+&quot;with status 404 (expected :&quot;+&quot;${__V(de;AccBal${counterAccount})}&quot;+&quot;) (actual :&quot;+&quot;${delAccBalance})&quot;);
		}
		else if(vars.get(&quot;messageFailure&quot;).equals(&quot;&quot;)){
			vars.put(&quot;messageFailure&quot;,&quot;delAccountHeadBalance&quot;+vars.get(&quot;counterAccount&quot;)+&quot;Failed&quot;+&quot;(expected :&quot;+&quot;${__V(accBal${counterAccount})}&quot;+&quot; )(actual :&quot;+&quot;${delAccBalance})&quot;);
		}
		else{
			vars.put(&quot;messageFailure&quot;,vars.get(&quot;messageFailure&quot;)+&quot;;delAccountHeadBalance&quot;+vars.get(&quot;counterAccount&quot;)+&quot;Failed&quot;+&quot;(expected :&quot;+&quot;${__V(delAccBal${counterAccount})}&quot;+&quot; )(actual :&quot;+&quot;${delAccBalance})&quot;);
		}
		
	}
}
else{
	vars.put(&quot;DeleteBalanceChecker&quot;,&quot;true&quot;);
	vars.put(&quot;messageFailure&quot;,&quot;&quot;);
}

//restoring values of checker to default values here
vars.put(&quot;delSavBalanceChecker&quot;,&quot;true&quot;);
vars.put(&quot;delLoanBalanceChecker&quot;,&quot;true&quot;);
vars.put(&quot;delAccBalanceChecker&quot;,&quot;true&quot;);
vars.put(&quot;counterSaving&quot;,&quot;1&quot;);
vars.put(&quot;counterLoan&quot;,&quot;1&quot;);
vars.put(&quot;counterAccount&quot;,&quot;1&quot;);
vars.put(&quot;savingCodeDel&quot;,&quot;&quot;);
vars.put(&quot;loanCodeDel&quot;,&quot;&quot;);
vars.put(&quot;accountCodeDel&quot;,&quot;&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
