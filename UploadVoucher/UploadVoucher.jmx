<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1691471185000</longProp>
        <longProp name="ThreadGroup.end_time">1691471185000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
          <stringProp name="propFilePath">../../config.properties</stringProp>
        </com.tag.jmeter.ext.config.PropertyReader>
        <hashTree/>
        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
          <stringProp name="propFilePath">Configurations/uploadvoucher.properties</stringProp>
        </com.tag.jmeter.ext.config.PropertyReader>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">../../${__P(userFile,&quot;userdata.csv&quot;)}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(targetHost,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(targetPort,8080)}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers"/>
        </HeaderManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="View State Extractor for Http Post" enabled="true">
          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
          <stringProp name="RegexExtractor.refname">myViewState</stringProp>
          <stringProp name="RegexExtractor.regex">&lt;input .* name=&quot;javax\.faces\.ViewState&quot;.* id=&quot;javax\.faces\.ViewState&quot;.* value=&quot;(.+?)&quot;.*</stringProp>
          <stringProp name="RegexExtractor.template">$1$</stringProp>
          <stringProp name="RegexExtractor.default"></stringProp>
          <stringProp name="RegexExtractor.match_number">1</stringProp>
          <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
        </RegexExtractor>
        <hashTree/>
        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ViewState for Ajax Call" enabled="true">
          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
          <stringProp name="RegexExtractor.refname">ViewState</stringProp>
          <stringProp name="RegexExtractor.regex">&lt;update id=&quot;javax.faces.ViewState&quot;&gt;&lt;![^0-9-]*(-*\d+:-*\d+)</stringProp>
          <stringProp name="RegexExtractor.template">$1$</stringProp>
          <stringProp name="RegexExtractor.default"></stringProp>
          <stringProp name="RegexExtractor.match_number">1</stringProp>
          <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
        </RegexExtractor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//Refresh of capture parameters
public void refreshCapture(){
	vars.put(&quot;actual_result&quot;,&quot;&quot;);
	vars.put(&quot;expected_result&quot;,&quot;&quot;);
	vars.put(&quot;caseId&quot;,&quot;&quot;);
	vars.put(&quot;caseName&quot;,&quot;&quot;);
	
}
refreshCapture();

</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="BeanShell Listener" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">if(${__P(printOutputConsole,1)}==1){
//Console writing and file writing here
 //Start of programming here 
import java.io.FileWriter;
import org.apache.jmeter.services.FileServer;
import java.io.File;

//Variable initialization and value assigning here
String sampleName = prev.getSampleLabel();

Long responseTime = prev.getTime(); 
Long responseSize = prev.getBytesAsLong();
Boolean isResponseSuccessful = prev.isSuccessful();
StringBuilder sb=new StringBuilder();
sb.append(sampleName+&quot;,&quot;+responseTime+&quot;,&quot;+responseSize+&quot;,&quot;+isResponseSuccessful+&quot;\n&quot;);
log.info(sb.toString());
String []header={&quot;SampleName&quot;,&quot;ResponseTime&quot;,&quot;ResponseSize&quot;,&quot;isResponseSuccessful&quot;};

if(sampleName.startsWith(&quot;TC_&quot;)){
	System.out.println(&quot; Case ID:&quot;+&quot;${caseId}&quot;);
	System.out.println(&quot; Case Name:&quot; +&quot;${caseName}&quot;);
	System.out.println(&quot; Response Time of Test Case : &quot;+responseTime);
	System.out.println(&quot; Response Size of Test Case : &quot;+responseSize);
	System.out.println(&quot; Status of Test Case executed : &quot;+isResponseSuccessful);
	System.out.println();
	
}

}



</stringProp>
        </BeanShellListener>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
        </ResponseAssertion>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/login.xhtml</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="loginauth" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="loginForm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">loginForm</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loginForm</stringProp>
                </elementProp>
                <elementProp name="loginForm:name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loginForm:name</stringProp>
                </elementProp>
                <elementProp name="loginForm:password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Cbb@2015</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loginForm:password</stringProp>
                </elementProp>
                <elementProp name="loginForm:loginBtn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loginForm:loginBtn</stringProp>
                </elementProp>
                <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${myViewState}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/login.xhtml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CSV RowCounter" enabled="true">
          <stringProp name="TestPlan.comments">Counts the file row as defined in the configuration files</stringProp>
          <stringProp name="BeanShellSampler.query">import org.apache.commons.io.FileUtils;
import java.io.FileReader;
import org.apache.jmeter.services.FileServer;
String ScriptFileDir=FileServer.getFileServer().getBaseDir();

String getDir = ScriptFileDir +&quot;/&quot;+&quot;${__P(uploadvoucherFile)}&quot;;


BufferedReader br = new BufferedReader(new FileReader(getDir));
String line;
int counter = 1;
int readLineNo = FileUtils.readLines(new File(getDir)).size();
while ((line = br.readLine()) != null) {
	if(counter==readLineNo)
	{
		counter++;
		continue;
	}
	vars.put(&quot;VAR_&quot; + counter, line);	
	counter++;
}
br.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">VAR</stringProp>
          <stringProp name="ForeachController.returnVal"></stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Pre WebService Check" enabled="true">
            <stringProp name="IncludeController.includepath">../../ReusableLibrary/webServiceValidate.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="VoucherData" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${__P(uploadvoucherFile,uploadvoucher.csv)}</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames"></stringProp>
          </CSVDataSet>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Settings Change Controller" enabled="true">
            <stringProp name="IncludeController.includepath">../../ReusableLibrary/settingsChange.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="goto upload page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UPLOAD YES" enabled="true">
            <stringProp name="IfController.condition">&quot;${UPLOAD}&quot;==&quot;YES&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IS IBT YES" enabled="true">
              <stringProp name="IfController.condition">&quot;${IBT}&quot;==&quot;YES&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Choose" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:need_entry_ibt</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:need_entry_ibt</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm+uploadInputForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">valueChange</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">change</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:need_entry_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:need_entry_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">JOURNAL</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:chk_is_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:chk_is_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">8080</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload UI" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="uploadFile" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uploadFile</stringProp>
                    </elementProp>
                    <elementProp name="uploadFile_contentLoad" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uploadFile_contentLoad</stringProp>
                    </elementProp>
                    <elementProp name="headerForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerForm</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">upload</stringProp>
                  <stringProp name="RegexExtractor.regex">j_idt(\d+):j_idt(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$0$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload UI 2nd POST" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:uploadBtn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">@all</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:uploadBtn" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:uploadBtn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:uploadBtn</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:need_entry_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:need_entry_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">JOURNAL</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:chk_is_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:chk_is_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">8080</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${Path}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${Path}</stringProp>
                      <stringProp name="File.paramname">${upload}</stringProp>
                      <stringProp name="File.mimetype">vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${upload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:msg headerBtnForm:saveBtn uploadInputForm:myTrans:uploadInputTable </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${upload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="${upload}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${upload}</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">actual_output1</stringProp>
                  <stringProp name="RegexExtractor.regex">msgs:\[\{summary:&quot;([^&quot;]*)&quot;,detail:&quot;[^&quot;]*&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">@all</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:saveBtn" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:saveBtn</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:need_entry_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:need_entry_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">JOURNAL</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:chk_is_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:chk_is_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">actual_output</stringProp>
                  <stringProp name="RegexExtractor.regex">msgs:\[\{summary:&quot;([^&quot;]*)&quot;,detail:&quot;[^&quot;]*&quot;,severity:&apos;(info|error)&apos;}]}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IS IBT NO" enabled="true">
              <stringProp name="IfController.condition">&quot;${IBT}&quot;==&quot;NO&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Choose" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:need_entry_ibt</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:need_entry_ibt</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm+uploadInputForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">valueChange</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">change</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:need_entry_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:need_entry_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">JOURNAL</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload UI" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="uploadFile" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uploadFile</stringProp>
                    </elementProp>
                    <elementProp name="uploadFile_contentLoad" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uploadFile_contentLoad</stringProp>
                    </elementProp>
                    <elementProp name="headerForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerForm</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">upload</stringProp>
                  <stringProp name="RegexExtractor.regex">j_idt(\d+):j_idt(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$0$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload UI 2nd POST" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:uploadBtn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">@all</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uploadFile</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:uploadBtn" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:uploadBtn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:uploadBtn</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:need_entry_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:need_entry_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">JOURNAL</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">8080</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${Path}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${Path}</stringProp>
                      <stringProp name="File.paramname">${upload}</stringProp>
                      <stringProp name="File.mimetype">vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${upload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:msg headerBtnForm:saveBtn uploadInputForm:myTrans:uploadInputTable </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${upload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="${upload}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${upload}</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">actual_output1</stringProp>
                  <stringProp name="RegexExtractor.regex">msgs:\[\{summary:&quot;([^&quot;]*)&quot;,detail:&quot;[^&quot;]*&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Save" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.source</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">@all</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:saveBtn" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:saveBtn</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">headerBtnForm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:need_entry_ibt_input" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:need_entry_ibt_input</stringProp>
                    </elementProp>
                    <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">JOURNAL</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">actual_output</stringProp>
                  <stringProp name="RegexExtractor.regex">msgs:\[\{summary:&quot;([^&quot;]*)&quot;,detail:&quot;[^&quot;]*&quot;,severity:&apos;(info|error)&apos;}]}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UPLOAD NO" enabled="true">
            <stringProp name="IfController.condition">&quot;${UPLOAD}&quot;==&quot;NO&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="General Ledger" enabled="true">
              <stringProp name="IfController.condition">&quot;${VOUCHER_TYPE}&quot;==&quot;GL&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DR and CR Amount ADD" enabled="true">
                <stringProp name="IfController.condition">&quot;${DR}&quot;==&quot;DR&quot; || &quot;${CR}&quot;==&quot;CR&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DR" enabled="true">
                  <stringProp name="IfController.condition">&quot;${DR}&quot;==&quot;DR&quot; </stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose TYPE" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:checkListForInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:checkListForInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">idt</stringProp>
                      <stringProp name="RegexExtractor.regex">{s:&amp;quot;uploadInputForm:j_idt(.+?)&amp;quot;,u:&amp;quot;uploadInputForm headerBtnForm:msg&amp;quot;}</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Account Head" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:ahcodeInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:ahcodeInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">itemSelect</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">itemSelect</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_itemSelect" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_itemSelect</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Organization" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:organizationInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:organizationInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${organization}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Dr Amount" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:drAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:drAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:drAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${organization}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DR_Amount}.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Memo" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:memoInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:memoInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${organization}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DR_Amount}.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${memo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ADD" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:j_idt${idt}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">@all</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm+headerBtnForm:msg</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:j_idt${idt}" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:j_idt${idt}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:j_idt${idt}</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${organization}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DR_Amount}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${memo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CR" enabled="true">
                  <stringProp name="IfController.condition">&quot;${CR}&quot;==&quot;CR&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Account Head" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:ahcodeInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:ahcodeInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">itemSelect</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">itemSelect</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_itemSelect" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_itemSelect</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Organization" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:organizationInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:organizationInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${organization}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Cr Amount" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:crAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:crAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:crAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${organization}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CR_Amount}.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Memo" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:memoInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:memoInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${organization}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CR_Amount}.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${memo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ADD" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:j_idt${idt}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">@all</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm+headerBtnForm:msg</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:j_idt${idt}" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:j_idt${idt}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:j_idt${idt}</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode_name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:ahcodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:ahcodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:organizationInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${organization}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:organizationInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CR_Amount}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${memo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SAVE" enabled="true">
                  <stringProp name="IfController.condition">&quot;${SAVE}&quot;==&quot;DR_SAVE&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PREVIEW" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">headerBtnForm:previewBtn</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">@all</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">headerBtnForm+uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="headerBtnForm:previewBtn" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">headerBtnForm:previewBtn</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">headerBtnForm:previewBtn</stringProp>
                        </elementProp>
                        <elementProp name="headerBtnForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">headerBtnForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">headerBtnForm</stringProp>
                        </elementProp>
                        <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">JOURNAL</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAVE" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">@all</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">headerBtnForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="headerBtnForm:saveBtn" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">headerBtnForm:saveBtn</stringProp>
                        </elementProp>
                        <elementProp name="headerBtnForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">headerBtnForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">headerBtnForm</stringProp>
                        </elementProp>
                        <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">JOURNAL</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">actual_output</stringProp>
                      <stringProp name="RegexExtractor.regex">msgs:\[\{summary:&quot;([^&quot;]*)&quot;,detail:&quot;[^&quot;]*&quot;,severity:&apos;(info|error)&apos;}]}</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Account Opening" enabled="true">
              <stringProp name="IfController.condition">&quot;${VOUCHER_TYPE}&quot;==&quot;AO&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DR and CR Amount ADD" enabled="true">
                <stringProp name="IfController.condition">&quot;${DR}&quot;==&quot;DR&quot; || &quot;${CR}&quot;==&quot;CR&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DR" enabled="true">
                  <stringProp name="IfController.condition">&quot;${DR}&quot;==&quot;DR&quot; </stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose TYPE" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:checkListForInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:checkListForInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${myViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">idt</stringProp>
                      <stringProp name="RegexExtractor.regex">{s:&amp;quot;uploadInputForm:j_idt(.+?)&amp;quot;,u:&amp;quot;uploadInputForm headerBtnForm:msg&amp;quot;}</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Account Head" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:aocodeInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:aocodeInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">itemSelect</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">itemSelect</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_itemSelect" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_itemSelect</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DrAccountNo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Dr Amount" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:drAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:drAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:drAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DrAccountNo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DR_Amount}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Memo" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:memoInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:memoInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DrAccountNo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DR_Amount}.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${memo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ADD" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:j_idt${idt}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">@all</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm+headerBtnForm:msg</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:j_idt${idt}" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:j_idt${idt}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:j_idt${idt}</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DrAccountNo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Drcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${DR_Amount}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${memo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CR" enabled="true">
                  <stringProp name="IfController.condition">&quot;${CR}&quot;==&quot;CR&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose TYPE" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:checkListForInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:checkListForInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">idt</stringProp>
                      <stringProp name="RegexExtractor.regex">({s:&amp;quot;uploadInputForm:j_idt(.+?)&amp;quot;,u:&amp;quot;uploadInputForm headerBtnForm:msg&amp;quot;})</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Account Head" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:aocodeInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:aocodeInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">itemSelect</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">itemSelect</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_itemSelect" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_itemSelect</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CrAccountNo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Cr Amount" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:crAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:crAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:crAmountInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CrAccountNo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CR_Amount}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose Memo" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:memoInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:memoInp</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">change</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CrAccountNo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CR_Amount}.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${memo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ADD" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:j_idt${idt}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.source</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">@all</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm+headerBtnForm:msg</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:j_idt${idt}" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm:j_idt${idt}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:j_idt${idt}</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">uploadInputForm</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:transactionDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:transactionDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:valueDateNpInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${tran_date}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:valueDateNpInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:narrationInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:narrationInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_focus" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_focus</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:checkListForInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${VOUCHER_TYPE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:checkListForInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_input" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CrAccountNo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_input</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:aocodeInp_hinput" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${Crcode}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:aocodeInp_hinput</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:drAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:drAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:crAmountInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CR_Amount}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:crAmountInp</stringProp>
                        </elementProp>
                        <elementProp name="uploadInputForm:memoInp" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${memo}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploadInputForm:memoInp</stringProp>
                        </elementProp>
                        <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ViewState}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SAVE" enabled="true">
                <stringProp name="IfController.condition">&quot;${SAVE}&quot;==&quot;CR_SAVE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PREVIEW" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.source" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm:previewBtn</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.source</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@all</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm+uploadInputForm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:previewBtn" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm:previewBtn</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:previewBtn</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">JOURNAL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ViewState}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAVE" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.source" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.source</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@all</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:saveBtn" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:saveBtn</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">JOURNAL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ViewState}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">actual_output</stringProp>
                    <stringProp name="RegexExtractor.regex">msgs:\[\{summary:&quot;([^&quot;]*)&quot;,detail:&quot;[^&quot;]*&quot;,severity:&apos;(info|error)&apos;}]}</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MANUAL IBT Save" enabled="true">
                <stringProp name="IfController.condition">&quot;${MANUAL_IBT}&quot;==&quot;on&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PREVIEW" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.source" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm:previewBtn</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.source</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@all</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm+uploadInputForm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:previewBtn" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm:previewBtn</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:previewBtn</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">JOURNAL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ViewState}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:chk_is_ibt_input" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${MANUAL_IBT}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:chk_is_ibt_input</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAVE" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.source" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.source</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@all</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:saveBtn" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm:saveBtn</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:saveBtn</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">headerBtnForm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:vtypeSel" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">JOURNAL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:vtypeSel</stringProp>
                      </elementProp>
                      <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ViewState}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                      </elementProp>
                      <elementProp name="headerBtnForm:chk_is_ibt_input" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${MANUAL_IBT}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">headerBtnForm:chk_is_ibt_input</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/voucher/upload.xhtml</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">actual_output</stringProp>
                    <stringProp name="RegexExtractor.regex">msgs:\[\{summary:&quot;([^&quot;]*)&quot;,detail:&quot;[^&quot;]*&quot;,severity:&apos;(info|error)&apos;}]}</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Maintainance DELETE" enabled="true">
            <stringProp name="IfController.condition">&quot;${UPLOAD}&quot;==&quot;DELETE&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Maintenance GET" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/Utils/Maintenance.xhtml</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">del</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a href=&quot;#maintenanceTabView:j_idt(.+?)&quot; tabindex=&quot;-1&quot;&gt;Uploaded Voucher&lt;\/a&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UPLOAD VOUCHER Select" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.source" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.source</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:gcTransForm+maintenanceTabView:IBMemberXferForm+maintenanceTabView:provisionMaintForm+maintenanceTabView:loanNatingMaintForm+maintenanceTabView:chequeTransactionMaintForm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.behavior.event" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">tabChange</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.behavior.event</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.partial.event" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">tabChange</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.event</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView_newTab" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:j_idt${del}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView_newTab</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView_tabindex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView_tabindex</stringProp>
                  </elementProp>
                  <elementProp name="headerForm" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">headerForm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">headerForm</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ViewState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/Utils/Maintenance.xhtml</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOAD Upload Voucher" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.source" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:uploadedVoucherForm:loanNatingMaintPreview</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.source</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">@all</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:uploadedVoucherForm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView:uploadedVoucherForm:loanNatingMaintPreview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:uploadedVoucherForm:loanNatingMaintPreview</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView:uploadedVoucherForm:loanNatingMaintPreview</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView:uploadedVoucherForm" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:uploadedVoucherForm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView:uploadedVoucherForm</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable_rppDD" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable_rppDD</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable_selection</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ViewState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/Utils/Maintenance.xhtml</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="DELETE" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">delete</stringProp>
                <stringProp name="RegexExtractor.regex">id:&quot;maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable:(\d+):j_idt(\d+)&quot;,behaviors</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">5</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Uploaded Voucher" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="javax.faces.partial.ajax" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.ajax</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.source" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable:${delete_g1}:j_idt${delete_g2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.source</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.partial.execute" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">@all</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.execute</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.partial.render" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:uploadedVoucherForm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.partial.render</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable:${delete_g1}:j_idt${delete_g2}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable:${delete_g1}:j_idt${delete_g2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable:${delete_g1}:j_idt${delete_g2}</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView:uploadedVoucherForm" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">maintenanceTabView:uploadedVoucherForm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView:uploadedVoucherForm</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable_rppDD" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable_rppDD</stringProp>
                  </elementProp>
                  <elementProp name="maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">maintenanceTabView:uploadedVoucherForm:uploadedVoucherTable_selection</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ViewState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${__P(app,synergy)}/faces/Utils/Maintenance.xhtml</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">actual_output</stringProp>
                <stringProp name="RegexExtractor.regex">msgs:\[\{summary:&quot;([^&quot;]*)&quot;,detail:&quot;[^&quot;]*&quot;,severity:&apos;(info|error)&apos;}]}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Post WebService Check" enabled="true">
            <stringProp name="IncludeController.includepath">../../ReusableLibrary/webServiceValidate.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="TC_Save_${CaseID}" enabled="true">
            <stringProp name="BeanShellSampler.query">public void assertCheck(){
	if(vars.get(&quot;expected_result&quot;).equals(vars.get(&quot;actual_result&quot;))){	
	}
	else{
		ResponseCode=&quot;500&quot;;
		ResponseMessage=&quot;Message comparison failed&quot;;
	}
}
if(&quot;${actual_output}&quot;!=&quot;&quot;){
vars.put(&quot;actual_result&quot;,&quot;${actual_output}&quot;);
}
else if(&quot;${actual_output1}&quot;!=&quot;&quot;)
{
vars.put(&quot;actual_result&quot;,&quot;${actual_output1}&quot;);
}
vars.put(&quot;expected_result&quot;,&quot;${Assertions}&quot;);
vars.put(&quot;caseName&quot;,&quot;${TestCaseName}&quot;);
vars.put(&quot;caseId&quot;,&quot;${CaseID}&quot;);
if(vars.get(&quot;BalanceChecker&quot;).equals(&quot;false&quot;)){
	ResponseCode=500;
	ResponseMessage=vars.get(&quot;messageFailure&quot;);
}
else{
assertCheck();
}

//refresh for Balance Capturer so if included webservice is not required and above conditions fails so it won&apos;t fail the running test as it doesn&apos;t need webservice check
vars.put(&quot;BalanceChecker&quot;,&quot;true&quot;);
vars.put(&quot;messageFailure&quot;,&quot;&quot;);
vars.put(&quot;actual_output&quot;,&quot;&quot;);
vars.put(&quot;actual_output1&quot;,&quot;&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
